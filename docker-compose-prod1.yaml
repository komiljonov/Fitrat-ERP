version: "2.4"

services:
  redis:
    image: redis:alpine
    restart: unless-stopped
    ports: ["6380:6379"]
    volumes:
      - redis-data:/data
    command: >
      redis-server
        --appendonly no
        --save ""
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --loglevel warning
    environment:
      - TZ=Etc/GMT+5
    mem_limit: 600m
    mem_reservation: 256m
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 10s
    ulimits:
      nofile: 65536

  postgres:
    image: postgres:16
    init: true
    environment:
      - POSTGRES_DB=fitrat
      - POSTGRES_USER=fitrat_user
      - POSTGRES_PASSWORD=your_secure_password
      - TZ=Etc/GMT+5
    ports: ["5434:5432"]
    volumes:
      - postgres_data_fitrat_ilm:/var/lib/postgresql/data
    restart: unless-stopped
    mem_limit: 900m
    mem_reservation: 512m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    ulimits:
      nofile: 65536

  django:
    build:
      context: ./config
    # Gunicorn instead of runserver
    command: >
      gunicorn config.wsgi:application
        --bind 0.0.0.0:8000
        --workers 2
        --threads 4
        --timeout 90
        --max-requests 1000
        --max-requests-jitter 100
        --access-logfile -
        --error-logfile -
        --log-level info
    volumes: &shared_volumes
      - ./config:/usr/src/app
      - ./utils:/usr/src/app/utils
      - ./locales:/usr/src/app/locales
      - ./tg_bot:/usr/src/app/tg_bot
    ports: ["8001:8000"]
    env_file: [.env]
    environment:
      - TZ=Etc/GMT+5
      # Ensure these are set in .env (example):
      # DJANGO_SETTINGS_MODULE=config.settings.prod
      # DATABASE_URL=postgres://fitrat_user:your_secure_password@postgres:5432/fitrat
      # REDIS_URL=redis://redis:6379/0
      # ALLOWED_HOSTS=your.domain,localhost
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    mem_limit: 900m
    mem_reservation: 600m
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 60s
    ulimits:
      nofile: 65536

  bot:
    build:
      context: ./config
    # (Your original looked broken) -> adjust to your bot entry:
    # e.g. "python -m tg_bot.bot" or "python manage.py bot"
    command: python -m tg_bot.bot
    volumes: *shared_volumes
    env_file: [.env]
    environment:
      - TZ=Etc/GMT+5
    restart: unless-stopped
    mem_limit: 400m
    mem_reservation: 256m
    depends_on:
      django:
        condition: service_started
      redis:
        condition: service_healthy

  celery:
    build:
      context: ./config
    command: >
      celery --app=root.celery worker
        --loglevel=INFO
        --concurrency=2
        --prefetch-multiplier=1
        --max-tasks-per-child=200
        --time-limit=300 --soft-time-limit=270
    env_file: [.env]
    environment:
      - TZ=Etc/GMT+5
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      django:
        condition: service_started
    volumes: *shared_volumes
    restart: unless-stopped
    mem_limit: 1g
    mem_reservation: 600m
    healthcheck:
      test: ["CMD-SHELL", "celery -A root.celery inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    ulimits:
      nofile: 65536

  celery_beat:
    build:
      context: ./config
    command: >
      celery --app=root.celery beat
        --loglevel=INFO
    env_file: [.env]
    environment:
      - TZ=Etc/GMT+5
    depends_on:
      redis:
        condition: service_healthy
    volumes: *shared_volumes
    restart: unless-stopped
    mem_limit: 256m
    mem_reservation: 128m
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'test -f /proc/1/status'"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    ulimits:
      nofile: 65536

volumes:
  postgres_data_fitrat_ilm:
  redis-data:
